|10 @Console &vector $2 &read $1 &pad $5 &write $1 &error $1

%PLUS_TWO { INC INC } ( num -- num + 2 )
%INC32 { #0000 #0001 add32 } ( long** -- long** + 1 )
%DUP4 { OVR2 OVR2 } ( a** -- a** a** )
%DUP8 { STH2 ROT2k ROT2 STH2 SWP2r STH2kr ROT2 STH2 SWP2 ROT2r STH2r STH2r STH2r } ( a** b** -- a** b** a** b** )
%LDZ4 { LDZ2k ROT PLUS_TWO LDZ2 } ( zero-page-address -- long** )
%STZ4 { STH SWP2 STHkr STZ2 STHr PLUS_TWO STZ2 } ( long** zero-page-address -- )
%INC_ZP { STHk LDZ4 INC32 STHr STZ4 } ( zero-page-address -- )

( zero page )
|0000
    @votes [ &yes $4 &no $4 &invalid $4 ]
    @current-view $1


|0100
    reset-votes
    .votes/yes INC_ZP
    .votes/yes INC_ZP
    .votes/yes LDZ4
    print-decimal

BRK

@reset-votes ( -- )
    #0000 #0000 DUP4 .votes/yes STZ4
    DUP4 .votes/no STZ4
    .votes/invalid STZ4
JMP2r


@print-decimal ( long** -- )

    #00 ,&z STR
    #3b9a #ca00 ,&parse JSR     ( 1 000 000 000 )
    #05f5 #e100 ,&parse JSR     ( 100 000 000 )
    #0098 #9680 ,&parse JSR     ( 10 000 000 )
    #000f #4240 ,&parse JSR     ( 1 000 000 )
    #0001 #86a0 ,&parse JSR     ( 100 000 )
    #0000 #2710 ,&parse JSR     ( 10 000 )
    #0000 #03e8 ,&parse JSR     ( 1000 )
    #0000 #0064 ,&parse JSR     ( 100 )
    #0000 #000a ,&parse JSR     ( 10 )
    NIP2 NIP
    &emit
        DUP [ LIT &z $1 ] EQU ,&skip JCN
            #ff ,&z STR DUP #30 ADD .Console/write DEO
            &skip
    POP

JMP2r
    &parse
        DUP8 div32 DUP ,&emit JSR mul32 sub32
    JMP2r

~math32.tal
