( referenced device ports, if any, defined in caller files!! )

@pop4 ( a^^ --  )
    POP2 POP2 JMP2r

@dup4 ( a^^ -- a^^ a^^ )
    OVR2 OVR2 JMP2r

@dup8 ( a^^ b^^ -- a^^ b^^ a^^ b^^ )
    STH2 ROT2k ROT2 STH2 SWP2r STH2kr ROT2 STH2 SWP2 ROT2r STH2r STH2r STH2r JMP2r

@is-digit ( char -- f )
    STHk LITr "0 LTHr LITr 00 EQUr
    LIT "9 GTH #00 EQU
    STHr AND    
    JMP2r

@plus-2 ( num^ -- num^ + 2 )
    INC2 INC2 JMP2r

@inc32 ( long^^ -- long^^ + 1 )
    #0000 #0001 add32 JMP2r

@lda4 ( abs-address* -- long^^ )
    STH2k plus-2 LDA2 LDA2r STH2r SWP2 JMP2r

@sta4 ( long^^ abs-address* -- )
    STH2k plus-2 STA2 STH2r STA2 JMP2r

@inc-at-abs ( abs-address* -- )
    STH2k lda4 inc32
    STH2r sta4 
    JMP2r

@tertiary ( val1* val2* flag -- flag ? val1 : val2 )
    ,&val1 JCN NIP2 JMP2r
    &val1 POP2 JMP2r

@print-line ( str* -- )
    print-string #0a #18 DEO JMP2r

@seq-til ( a* b* limit[<=ff] -- f ) 
    DUP #00 NEQ ,&setup JCN                 ( end with 01 if limit 0 )
    POP POP2 POP2
    #01
    JMP2r

    &setup
    ,&limit STR                             ( limit to loc var )
    STH2 
    #00 ,&counter STR                       ( counter = 0 )
    &l                                      ( compare strings by char )                
        LDAk LDAkr STHr                     
        ANDk #00 
        EQU ,&e JCN                         ( end if string ended )
        NEQk ,&e JCN                        ( end if chars diff )        

        ,&counter LDR INC DUP ,&counter STR ( counter++ ) 
        ,&limit LDR                         ( load 1 byte at addr limit )
        EQU ,&e JCN                         ( end if limit == counter ) 
        
        POP2 INC2 INC2r                     ( otherwise take next char )
        ,&l JMP 
        
        &e 
            NIP2 POP2r 
            EQU                             ( result of last comp is final result )
JMP2r
[  &counter $1 &limit $1 ]
    
@print-byte-decimal ( byte -- )
    DUP
    #00 EQU ,&zero JCN

    #00 ,&z STR
    #64 ,&parse JSR   ( 100 )
    #0a ,&parse JSR   ( 10 )
    
    &emit
        DUP [ LIT &z $1 ] EQU ,&skip JCN
            #ff ,&z STR DUP #30 ADD #18 DEO
            &skip
        POP
        JMP2r
    &parse
        DIVk DUP ,&emit JSR MUL SUB
        JMP2r
    &zero
        POP
        #30 #18 DEO
        JMP2r

@print-decimal ( long^^ -- )
    dup4
    non-zero32 ,&cont JCN
    pop4
    #30 #18 DEO
    JMP2r

    &cont
    #00 ,&z STR
    #3b9a #ca00 ,&parse JSR     ( 1 000 000 000 )
    #05f5 #e100 ,&parse JSR     ( 100 000 000 )
    #0098 #9680 ,&parse JSR     ( 10 000 000 )
    #000f #4240 ,&parse JSR     ( 1 000 000 )
    #0001 #86a0 ,&parse JSR     ( 100 000 )
    #0000 #2710 ,&parse JSR     ( 10 000 )
    #0000 #03e8 ,&parse JSR     ( 1000 )
    #0000 #0064 ,&parse JSR     ( 100 )
    #0000 #000a ,&parse JSR     ( 10 )
    NIP2 NIP
    &emit
        DUP ,&z LDR EQU ,&skip JCN
            #ff ,&z STR DUP #30 ADD #18 DEO
            &skip
    POP
    JMP2r
    
    &parse
        ;dup8 JSR2 div32 DUP ,&emit JSR mul32 sub32
    JMP2r
[ &z $1 ]    

@sdec-lthe-max ( start* end* -- f )      ( end: addr of terminator )   
    OVR2 SUB2                            ( str len )  
    #000a                 
    LTH2k ,&lth-10 JCN                   ( if len < 10, pass )  

    GTH2 ,&gth-10 JCN                    ( if len > 10, fail )

    #0000 SWP2 10-dig-dec-val            ( num <= ffff ffff? )  
    ,&pass JCN
    ,&fail JMP

    &gth-10
        POP2
    &fail
        #00    
        JMP2r
    
    &lth-10
        POP2 POP2 POP2
    &pass
        #01
        JMP2r

@10-dig-dec-val ( i^ inp* -- f )          ( i: 0000 -> 0009 over chars )
    STH2k                                 ( stash inp )
    OVR2                                  ( copy i )  
    ADD2 LDA #30 SUB STHk                 ( load inp + i and parse digit )   
    ROT ROT STH2k                         ( i to top )  
    ;max ADD2 LDA #30 SUB STHk            ( load max + i and parse digit )   
    GTH ,&too-big JCN                     ( if inp digit > max digit, fail )  
    
    ROTr ROTr STH2kr #0009                ( i to WS )   
    EQU2 ,&last JCN                       ( if i = 9, pass )  
    
    SWP2r STH2r                           ( inp and max digits to WS )  
    EQU ,&recurse JCN                     ( if equal, recurse )
    POP2r POP2r                           ( else, pass )
    #01
    JMP2r

    &too-big
        POP2r POP2r POP2r
        #00
        JMP2r
    &last
        POP2r POP2r POP2r
        #01
        JMP2r
    &recurse
        STH2r INC2 STH2r 10-dig-dec-val   ( recurse with i++ inp )
        JMP2r

[ @max "4294967295 $1 ]                   ( ffff ffff as decimal string ) 


@sdec-to-hex ( str*[max ffff ffff] -- val^^ )
    STH2
    #0000 #0000
    &w
        #0000 #000a mul32
        #0000 #00
        LDAkr LITr 30 SUBr STHr add32
        INC2r LDAkr STHr ,&w JCN
    POP2r

JMP2r

@prep-arg ( arg-addr* -- f )
    #00 ,&sep-ok STR            ( sep-ok = false )

    STH2                        ( keep arg-addr on RS floor )
    LDAkr STHr #00              ( load 1st char )
    EQU ,&fail JCN              ( if string empty, fail )

    &next-char
        LDAkr STHkr #00         ( load char )
        EQU ,&pass JCN          ( if char = 00, pass )  

        STHkr LIT ";
        EQU ,&sep-check JCN     ( if char = ;, terminate num )

        STHr is-digit                       
        #00 EQU ,&fail JCN      ( if char not a digit, fail )  

        #01 ,&sep-ok STR        ( sep-ok = true )
        INC2r                   ( arg-addr++ )
        ,&next-char JMP

        &sep-check
            POPr
            [ LIT &sep-ok $1 ]  ( sep-ok: is ; legal as current char? )
            #00 EQU ,&fail JCN  ( if illegal ;, fail )

            #00 STH2kr STA      ( terminate num with 00 )
            #00 ,&sep-ok STR    ( sep-ok = false )
            INC2r               ( arg-addr++ )
            ,&next-char JMP

        &fail
            POP2r
            #00    
            JMP2r

        &pass
            POPr POP2r
            #01
            JMP2r

@valid-arg-nums ( arg-addr* opt -- f )  ( nums list ends 00 00 )
    #01 ,&c STR                 ( c = 1 )
    STH STH2                    ( RS: |opt arg-addr )
    &next-num
        LDAkr STHr              ( LOAD char )
        #00 EQU ,&arr-cap JCN   ( if char = 00, array ended )

        ROTkr STHr POP2r        ( opt to WS )
        [ LIT &c $1 ]           ( c: count of nums )
        LTH ,&fail JCN          ( if opt < c, fail )

        STH2r DUP2 scap         ( find num end ) 
        DUP2 INC2 STH2          ( arg-addr = num end++ )
        sdec-lthe-max           
        #00 EQU ,&fail JCN      ( if num > ffff ffff, fail )

        ,&c LDR INC ,&c STR     ( c++ )
        ,&next-num JMP

    &fail
        POP2r POPr
        #00    
        JMP2r

    &arr-cap
        ROTr STHkr              ( opt to WS )
        ,&c LDR #01 SUB         ( c - 1 to compensate for 0 start )
        NEQ ,&fail JCN          ( if opt != c - 1, fail )

        POP2r POPr
        #01                     ( pass )
        JMP2r

@lthe-ff ( num^^ -- f )
    POP
    ORA ORA
    #00 EQU 
    JMP2r  

@valid-vote-arg ( arg-addr* opt -- f )
    #00 ,&ld-0 STR              ( ld-0 = false )
    STH STH2 DUP2r              ( RS | opt start start )
    LDAkr STHkr                 ( load 1st char )
    #00 EQU ,&fail-cleanup JCN  ( if string empty, fail )
    
    STHr LIT "0                 ( WS | char )
    NEQ ,&next-char JCN         ( if char != 0, start loop )
    #01 ,&ld-0 STR              ( ld-0 = true )
    INCr2                       ( move addr to next char )

    &next-char
        LDAkr STHkr #00         ( load char )
        EQU ,&cont JCN          ( if str cap, cont )  

        [ LIT &ld-0 $1 ]        ( if 1st char was 0 )
        ,&fail-cleanup JCN        

        STHr is-digit                       
        #00 EQU ,&fail JCN      ( if char not a digit, fail )

        INC2r                   ( arg-addr++ )
        ,&next-char JMP

    &cont
        POPr 
        OVR2r                       
        STH2r STH2kr sdec-lthe-max  ( WS | start end )
        #00 EQU ,&fail JCN          ( if num > ffff ffff, fail )

        OVR2r STH2r sdec-to-hex     ( WS | start; hex(num) )
        STHk                        ( stash last byte of hex result ) 
        lthe-ff                     
        #00 EQU ,&fail-cleanup JCN  ( if hex result > ff, fail )
  
        ROT2r ROTr ROTr LTHr STHkr  ( RS | hex byte < opt )
        #00 EQU ,&fail JCN

        POPr POP2r POP2r
        #01         ( pass )
        JMP2r

    &fail-cleanup
        POPr

    &fail
        POP2r POP2r POPr
        #00 
        JMP2r


( from lib )
@scap ( str* -- end* ) LDAk #00 NEQ JMP JMP2r &w INC2 LDAk ,&w JCN JMP2r

@slen ( str* -- len^ ) DUP2 ;scap JSR2 SWP2 SUB2 JMP2r

@pinl
    LDArk STHr DUP #18 DEO
    INC2r ,pinl JCN
JMP2r

@mclr ( src* len^ -- ) OVR2 ADD2 SWP2 &l STH2k #00 STH2r STA INC2 GTH2k ,&l JCN POP2 POP2 JMP2r

@print-string ( str* -- )

    &w
        LDAk #18 DEO
        INC2 LDAk ,&w JCN
    POP2

JMP2r

~/home/marton/uxn/pebble/src/math32.tal