( structs )
|00 @command &name $2 &in-voting $1 &length

( devices )
|10 @Console &vector $2 &read $1 &pad $5 &write $1 &error $1

( macros )
%EMIT { #18 DEO }
%EMIT2 { #18 DEO2 }
%NL { #0a EMIT }

( zero page )
|0000
    @opt $1
    @voting $1
    @can-vote $1

( main )
|0100
    #03 .opt STZ                        ( default number of vote options )
    welcome
    ;on-input .Console/vector DEO2 
BRK

( variables )
@votes 03fc &body $1020                 ( max 255 options, 4 bytes each )
@input 0b01 &body $2817 &overflow $1    ( max 255 options, each max 11 char + longest command name )
@ptr :input/body

( constants )
@commands ( name* in-voting )
    &setup  :dict/setup  00
    &start  :dict/start  00
    &endv   :dict/endv   01
    &next   :dict/next   01
    &vote   :dict/vote   01
    &res    :dict/res    00
    &tab    :dict/tab    00
    &end

@dict
    &welc   "Welcome 20 "to 20 "`pebble`! $1
    &setup  "setup 20 $1
    &start  "start 20 "vote $1 
    &endv   "end 20 "vote $1
    &next   "next 20 "voter $1
    &vote   "vote 20 $1
    &res    "add 20 "results 20 $1
    &tab    "tabulate $1
    &vinp   "Vote 20 "currently 20 "in 20 "progress $1
    &novinp "No 20 "vote 20 "in 20 "progress $1
    &unrec  "Command 20 "not 20 "recognised $1
    &prompt ">> 20 $1
    &cast   "Vote 20 "cast $1
    &verr   "Invalid 20 "candidate 20 "number 20 "provided $1
    &serr   "Invalid 20 "number 20 "of 20 "candidates 20 "provided $1
    &opterr "Number 20 "of 20 "candidates 20 "must 20 "be 20 "at 20 "least 20 "2 $1
    &notrdy "Not 20 "ready 20 "for 20 "next 20 "voter $1
    &tabln  "Votes 20 "for 20 "candidate 20 $1 
    &terr   "Invalid 20 "vote 20 "results 20 "provided $1
    &newopt "Number 20 "of 20 "candidates 20 "set 20 "to: 20 $1
    &col    ": 20 $1
    &inval  "Invalid 20 "votes $1

( subroutines )
@welcome
    ;dict/welc print-line
    ;dict/newopt print-string
    .opt LDZ #01 SUB print-byte-decimal NL
    ;dict/prompt print-string
JMP2r

@on-input                               ( called for each char on submit )
    .Console/read DEI                   ( read char )
    #0a EQU ;on-enter JCN2              ( was it enter? )
    
    ;input/overflow LDA #00 
    NEQ ,&ignore-char JCN               ( if buffer already overflowing, stop saving chars )
    
    .Console/read DEI ;ptr LDA2 STA     ( save char )
    ;ptr LDA2k INC2 SWP2 STA2           ( ptr++ )        
    BRK                                 ( wait for next char )           

    &ignore-char
BRK

@on-enter
    ;input/overflow LDA #00 
    NEQ ,&unrecognised JCN              ( if buffer overflowing, reject input )
                                        ( otherwise process input )    
    #00 ;ptr LDA2 STA                 	( null terminate input str )
    
    ;commands/setup ;do-setup if-match  ( try to match input to a command )   	
    ;commands/start ;do-start-vote if-match      
    ;commands/endv ;do-end-vote if-match           
    ;commands/next ;do-next-voter if-match           
    ;commands/vote ;do-vote if-match         
    ;commands/tab ;do-tabulate if-match   
    ;commands/res ;do-add-results if-match   

    &unrecognised
        ;dict/unrec print-line
        command-done                    ( finished with input )

BRK

@if-match ( *command *command-func -- )
    STH2                            ( stash func )
    DUP2 is-command 
    #00 EQU ,&no-match JCN          ( if no match, return )

    ;command/in-voting ADD2 LDA     ( if command is meant to be issued while voting )
    .voting LDZ                     ( if currently voting )
    NEQ ,&illegal JCN

    STH2r JSR2                      ( execute func )
    command-done                    ( finished with input )
    POP2r
    BRK

    &illegal
        POP2r
        ;dict/vinp ;dict/novinp .voting LDZ tertiary
        print-line
        command-done                ( finished with input )
        POP2r
        BRK
    &no-match
        POP2r POP2
        JMP2r                       ( there are still other commands to check against )

@command-done
    ;input/body ;ptr STA2            ( reset ptr )  
    #00 ;input/overflow STA          ( reset overflow )  
    ;input/body ;input LDA2 mclr     ( clear input buffer )
    ;dict/prompt print-string
JMP2r

@exp-arg ( *command -- f )
    LDA2 scap #0001 SUB2 LDA            ( last char in command name )
    #20 EQU                             ( if space, expects arg )
    JMP2r

@has-arg ( *command -- f )
    arg-addr LDA                        ( first char of arguments )
    #00 NEQ  
    JMP2r

@args-ok ( *command -- f )
    DUP2 exp-arg
    ROT ROT has-arg
    EQU
JMP2r

@is-command ( *command -- f )
    LDA2k
    DUP2 slen NIP                        ( ref command length <= ff )
    ;input/body ROT
    seq-til                              ( does the input match the command name? )  
    ROT ROT args-ok
    AND 
JMP2r

@do-setup   
    ;commands/setup arg-addr             ( get arg address )
    DUP2 #ff opt-num-lth                 ( input < ff )
    #00 EQU ,&invalid-arg JCN            ( end if option invalid )

    sdec-to-hex-byte DUP                 ( input as byte )
    DUP #02 
    LTH ,&too-small JCN                  ( input < 2? )

    INC .opt STZ                         ( adding 1 option for invalid votes )   
    reset-vote
    ;dict/newopt print-string
    print-byte-decimal NL
    JMP2r

    &too-small 
        POP
        ;dict/opterr print-line
        JMP2r

    &invalid-arg
        POP2
        ;dict/serr print-line
JMP2r

@do-start-vote    
    reset-vote
    #01 .voting STZ    
    enable-next-voter
JMP2r

@reset-vote
    ;votes/body ;votes LDA2 mclr        
JMP2r

@do-end-vote
    #00 .voting STZ    
JMP2r

@enable-next-voter
    #01 .can-vote STZ 
JMP2r

@do-next-voter
    enable-next-voter
JMP2r

@do-vote
    .can-vote LDZ #00 EQU ,&cannot-vote JCN

    ;commands/vote arg-addr                  ( get arg address )
    DUP2 .opt LDZ opt-num-lth                ( input < opt? )   
    #00 EQU ,&invalid-arg JCN                ( end if option invalid )

    sdec-to-hex-byte                         ( input as byte )
    choice-addr inc-at-abs                   ( cast vote )    
    ;dict/cast print-line 
    #00 .can-vote STZ 
    JMP2r   

    &invalid-arg
        POP2
        ;dict/verr print-line
        JMP2r
    &cannot-vote
        ;dict/notrdy print-line
JMP2r

@arg-addr ( *command -- arg* )
    LDA2 slen ;input/body ADD2              ( ref command length + command addr = arg addr )
JMP2r

@choice-addr ( choice -- choice-addr* )
    #00 SWP                                 ( choice to short )
    #0004 MUL2 ;votes/body ADD2             ( choice * 4 + votes addr = option addr )
JMP2r

@do-tabulate 
    #00 ,&c STR                            ( choice counter = 0 )
    &l
        ,&c LDR tabulate-option

        ,&c LDR INC DUP ,&c STR            ( c++ )
        .opt LDZ 
        LTH ,&l JCN
JMP2r
[ &c $1 ]

@tabulate-option ( choice )
    DUP choice-addr ROT
    DUP #00 EQU ,&invalid JCN               ( 0th element is the invalid choice )
    ;dict/tabln print-string
    print-byte-decimal
    &fin
        ;dict/col print-string              ( print vote count for choice )
        lda4 print-decimal NL
        JMP2r

    &invalid                    
        POP
        ;dict/inval print-string
        ,&fin JMP

@do-add-results
    valid-addres-arg ,&cont JCN              ( if args invalid, end )
    ;dict/terr print-line
    JMP2r

    &cont
    ;commands/res arg-addr ,&s STR2
    #00 ,&c STR
    &next-num
        [ LIT &c $1 ] .opt LDZ LTH
        #00 EQU ,&end JCN

        [ LIT2 &s $2 ] sdec-to-hex 
        ,&c LDR choice-addr 
        STH2k lda4 
        add32
        STH2r sta4  

        ,&c LDR INC ,&c STR ( c++ )
        ,&s LDR2 scap INC2  ( s = start of next num )
        ,&s STR2
        ,&next-num JMP

    &end
JMP2r

@valid-addres-arg ( -- f )
    ;commands/res arg-addr DUP2 ( results addr )
    ;input arr-cap STH2k        ( arr cap )
    prep-arg
    ROT ROT
    STH2r                       ( arr cap )
    .opt LDZ valid-arg-nums
    AND
    JMP2r


~/home/marton/uxn/pebble/src/functions.tal
